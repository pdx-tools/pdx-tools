#!/usr/bin/env node

import { promises as fs } from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

type ReleaseSection = Record<string, string[]>;

type ReleaseData = {
  sections?: ReleaseSection;
  headline?: string;
  summary?: string;
  learn_more_url?: string;
  cta?: { label?: string; url?: string };
};

const SECTION_ORDER: Array<{ key: keyof ReleaseSection; label: string }> = [
  { key: "improvements", label: "‚ú®" },
  { key: "fixes", label: "üêõ" },
];

const rootDir = path.resolve(fileURLToPath(new URL("../..", import.meta.url)));
const INDEX_PATH = path.join(rootDir, "src", "app", "public", "whats-new.json");
const UPDATES_DIR = path.join(rootDir, "src", "app", "public", "whats-new");
const OUTPUT_PATH = path.join(
  rootDir,
  "src",
  "docs",
  "src",
  "pages",
  "changelog.mdx",
);

async function readJson<T>(filePath: string): Promise<T> {
  const content = await fs.readFile(filePath, "utf8");
  return JSON.parse(content) as T;
}

function ensureBlankLine(lines: string[]): void {
  if (lines.length === 0 || lines[lines.length - 1] === "") {
    return;
  }
  lines.push("");
}

function addParagraph(lines: string[], text?: string | null): void {
  if (!text) return;
  const trimmed = text.trim();
  if (!trimmed) return;
  ensureBlankLine(lines);
  lines.push(trimmed);
}

function addList(lines: string[], items: string[], label: string): void {
  for (const item of items) {
    lines.push(`- ${label} ${item}`);
  }
}

async function gatherReleases(): Promise<
  Array<{ date: string; data: ReleaseData }>
> {
  const dates = await readJson<string[]>(INDEX_PATH);
  return Promise.all(
    dates.map(async (date) => ({
      date,
      data: await readJson<ReleaseData>(path.join(UPDATES_DIR, `${date}.json`)),
    })),
  );
}

function buildMarkdown(
  releases: Array<{ date: string; data: ReleaseData }>,
): string {
  const lines: string[] = [
    "<!-- Auto-generated by dev/scripts/generate-changelog.mts. Do not edit directly. -->",
    "",
    "# Changelog",
    "",
    "See a typo, grammar issue, or inaccuracy? [Edit this page](https://github.com/pdx-tools/pdx-tools/edit/master/src/docs/src/pages/changelog.mdx)",
  ];

  for (const { date, data } of releases) {
    const { sections = {}, headline, summary, learn_more_url, cta } = data;

    ensureBlankLine(lines);
    lines.push(`## ${date}`);

    addParagraph(lines, headline ? `**${headline}**` : undefined);
    if (summary && summary !== headline) {
      addParagraph(lines, summary);
    }

    for (const { key, label } of SECTION_ORDER) {
      const items = Array.isArray(sections[key]) ? sections[key] : [];
      addList(lines, items, label);
    }

    if (learn_more_url) {
      addParagraph(lines, `[Learn more](${learn_more_url})`);
    }

    if (cta?.label && cta.url) {
      addParagraph(lines, `[${cta.label}](${cta.url})`);
    }
  }

  ensureBlankLine(lines);

  return lines.join("\n") + "\n";
}

async function main(): Promise<void> {
  const releases = await gatherReleases();
  await fs.mkdir(path.dirname(OUTPUT_PATH), { recursive: true });
  const markdown = buildMarkdown(releases);
  await fs.writeFile(OUTPUT_PATH, markdown, "utf8");
}

main().catch((error) => {
  console.error("[changelog] Failed to generate changelog:", error);
  process.exitCode = 1;
});
