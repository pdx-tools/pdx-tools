name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]
  push:
    branches: [master]
  schedule:
    - cron: '0 2 * * *'

jobs:
  devcontainer:
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request_target' && contains(github.event.pull_request.labels.*.name, 'safe to test'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            with_tokens: false
          - os: ubuntu-latest
            with_tokens: true
    name: devcontainer / ${{ matrix.os }} / tokens-${{ matrix.with_tokens && 'included' || 'absent' }}
    env:
      CARGO_TERM_VERBOSE: true
      CARGO_INCREMENTAL: 0
      CARGO_PROFILE_DEV_DEBUG: 0
      CARGO_TERM_COLOR: always
    steps:
    - name: Remove unwanted software
      run: |
        echo "before"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        echo "after"
        df -h

    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache assets
      uses: actions/cache@v4
      with:
        path: |
          assets/game-bundles
          assets/eu4-saves
          src/vic3save/assets
        key: asset-cache

    - uses: actions/checkout@v4
      name: Clone tokens
      if: matrix.with_tokens
      with:
        path: assets/tokens
        repository: pdx-tools/tokens
        token: ${{secrets.GH_PAT}}

    - name: Link tokens
      if: matrix.with_tokens
      run: cd assets/tokens && ln -s tokens/* .

    - name: Build and run Dev Container task
      uses: devcontainers/ci@v0.3
      env:
        ASSETS_ACCESS_KEY: ${{ secrets.ASSETS_ACCESS_KEY }}
        ASSETS_SECRET_KEY: ${{ secrets.ASSETS_SECRET_KEY }}
        GH_PAT: ${{ secrets.GH_PAT }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        imageName: ghcr.io/pdx-tools/devcontainer
        env: |
          ASSETS_ACCESS_KEY
          ASSETS_SECRET_KEY
          CI
          GITHUB_TOKEN
        runCmd: |
          mise run admin:assets:sync && \
          mise run admin:assets:compile:all && \
          mise run ${{ matrix.with_tokens && 'test:cargo' || 'test:wasm' }}
          ${{ matrix.with_tokens && 'mise run test:app ::: typecheck' || '' }}
          mise run build:app

  build:
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'pull_request' ||
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request_target' && contains(github.event.pull_request.labels.*.name, 'safe to test'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            with_tokens: false
          - os: ubuntu-latest
            with_tokens: true
          - os: windows-latest
            with_tokens: false
          - os: windows-latest
            with_tokens: true
          - os: macos-15
            with_tokens: false # docker not supported on macos gh actions
    name: build / ${{ matrix.os }} / tokens-${{ matrix.with_tokens && 'included' || 'absent' }}
    env:
      CARGO_INCREMENTAL: 0
      CARGO_PROFILE_DEV_DEBUG: 0
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick
          convert -version

          # For some reason imagemagick's path policy is set to none on github actions
          # and we need it for sending hundreds of file paths to imagemagick.
          sudo sed -i 's/rights="none"/rights="read|write"/gI' "/etc/ImageMagick-6/policy.xml"
          identify -list policy
      - name: Install dependencies (macos)
        if: matrix.os == 'macos-15'
        run: |
          brew install imagemagick

          # Use brew installed llvm for zstd compilation
          echo "/opt/homebrew/opt/llvm@18/bin" >> $GITHUB_PATH

      - name: Cache assets
        uses: actions/cache@v4
        with:
          key: asset-cache
          enableCrossOsArchive: true # shared cache between OSes
          path: |
            assets/game-bundles
            assets/eu4-saves
            src/vic3save/assets

      - uses: actions/checkout@v4
        name: Clone tokens
        if: matrix.with_tokens
        with:
          path: assets/tokens
          repository: pdx-tools/tokens
          token: ${{secrets.GH_PAT}}

      - name: Link tokens
        if: matrix.with_tokens
        run: cd assets/tokens && ln -s tokens/* .

      - uses: jdx/mise-action@v2
      - run: rustup target add wasm32-unknown-unknown

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store
  
      - name: Asset pipeline
        if: matrix.with_tokens # if tokens are enabled, process game bundles
        env:
          ASSETS_ACCESS_KEY: ${{ matrix.with_tokens && secrets.ASSETS_ACCESS_KEY || '' }}
          ASSETS_SECRET_KEY: ${{ matrix.with_tokens && secrets.ASSETS_SECRET_KEY || '' }}
        run: |
          mise run admin:assets:sync
          mise run admin:assets:compile:all
      - run: |
          mise run ${{ matrix.with_tokens && 'test:cargo' || 'test:wasm' }}
          ${{ matrix.with_tokens && 'mise run test:app ::: typecheck' || '' }}
          mise run build:app 
